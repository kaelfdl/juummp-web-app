"""
Django settings for juummp project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import environ

from .util import get_aws_parameters

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env(DEBUG=(bool, False))
env_file = os.path.join(BASE_DIR, ".env")

store = {}


if os.path.isfile(env_file):
    # use local secret file if provided
    env.read_env(env_file)
else:
    try:
        get_aws_parameters(store, [
            'SECRET_KEY',
            'SECRET_ADMIN_URL',
            'DATABASE_URL',
            'DATABASE_ENGINE',
            'DATABASE_NAME',
            'DATABASE_USER',
            'DATABASE_PASSWORD',
            'DATABASE_HOST',
            'DATABASE_PORT',
            'DEBUG_VALUE',
        ])

        get_aws_parameters(store, [
            'SPOTIFY_CLIENT_ID',
            'SPOTIFY_CLIENT_SECRET',
            'SPOTIFY_REDIRECT_URI',
            'ALLOWED_HOSTS',
            'USE_S3',
            'STORAGE_BUCKET_NAME',
            'STORAGE_DEFAULT_ACL'

        ])
    except:
        raise Exception("No local .env detected. No secrets found.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY") if os.getenv("SECRET_KEY") else store['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG_VALUE") if os.environ.get("DEBUG_VALUE") == "True" else store['DEBUG_VALUE'] == "True"

ALLOWED_HOSTS = [os.getenv("ALLOWED_HOSTS") if os.getenv("ALLOWED_HOSTS") else store['ALLOWED_HOSTS']]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "frontend",
    "spotify",
    "storages"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "juummp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "juummp.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
try:
    DATABASES = {
        "default": {
            "ENGINE": f"django.db.backends.{store['DATABASE_ENGINE']}",
            "NAME": store['DATABASE_NAME'],
            "USER": store['DATABASE_USER'],
            "PASSWORD": store['DATABASE_PASSWORD'],
            "HOST": store['DATABASE_HOST'],
            "PORT": store['DATABASE_PORT'],
        }
    }
except:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# AWS S3 Configuration
USE_S3 = os.getenv('USE_S3') == 'TRUE' if os.getenv('USE_S3') else store['USE_S3'] == 'TRUE'

if USE_S3:
    # aws settings
    AWS_STORAGE_BUCKET_NAME = os.getenv('STORAGE_BUCKET_NAME') if os.getenv('STORAGE_BUCKET_NAME') else store['STORAGE_BUCKET_NAME']
    AWS_DEFAULT_ACL = os.getenv('STORAGE_DEFAULT_ACL') if os.getenv('STORAGE_DEFAULT_ACL') else store['STORAGE_DEFAULT_ACL']
    # AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'
    # STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
